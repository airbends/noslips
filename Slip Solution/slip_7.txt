/*    1.Write a C++ program using class with data member char str[50] and function replace (char chl, char ch2) every occurrence of chl in str should be replaced 
with ch2 and return number of replacement it makes use default value for char ch2. (Use ch2 as Default Argument)[15 Marks]       */

#include <iostream.h>
#include <conio.h>
#include <string.h>

class mystr {
public:
    int replace(char str[], char ch1, char ch2 = 'r') {
        int count = 0;
        for (int i = 0; str[i] != '\0'; i++) {
            if (str[i] == ch1) {
                str[i] = ch2;
                count++;
            }
        }
        return count;
    }
};

int main() {
    mystr m;
    char str[50], ch1;

    cout << "\nEnter string: ";
    cin >> str;

    cout << "\nEnter the character to replace: ";
    cin >> ch1;

    int rep = m.replace(str, ch1); // Function call

    cout << "\nNumber of replacements: " << rep;
    cout << "\nAfter replacement string: " << str << endl;

    return 0;
}





--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


/*2.Create a C++ class Vector with data members size & pointer to integer. The size of the vector varies so the memory should be allocated dynamically.
Perform following operations:.
1. accept vector
2.display vector in format(10,20,30,…….,)
3.calculate union of two vectors.
(use parameterized constructor & copy constructor)[25 Marks]      */




#include <iostream>
#include <conio.h>

using namespace std;

class Vector {
    int size;
    int *arr;

public:
    Vector(int s) {
        size = s;
        arr = new int[size];
    }
    Vector(const Vector &v) {
        size = v.size;
        arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = v.arr[i];
        }
    }

    ~Vector() {
        delete[] arr;
    }

    void accept() {
        cout << "Enter " << size << " elements: ";
        for (int i = 0; i < size; i++) {
            cin >> arr[i];
        }
    }

    void display() {
        cout << "(";
        for (int i = 0; i < size; i++) {
            cout << arr[i];
            if (i < size - 1) cout << ", ";
        }
        cout << ")\n";
    }

   
    static Vector calculateUnion(Vector &v1, Vector &v2) {
        int *temp = new int[v1.size + v2.size];
        int unionSize = 0;

    
        for (int i = 0; i < v1.size; i++) {
            temp[unionSize++] = v1.arr[i];
        }

    
        for (int i = 0; i < v2.size; i++) {
            bool found = false;
            for (int j = 0; j < v1.size; j++) {
                if (v2.arr[i] == v1.arr[j]) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                temp[unionSize++] = v2.arr[i];
            }
        }


        Vector result(unionSize);
        for (int i = 0; i < unionSize; i++) {
            result.arr[i] = temp[i];
        }

        delete[] temp;
        return result;
    }
};

int main() {
    int size1, size2;
    
    cout << "Enter size of first vector: ";
    cin >> size1;
    Vector v1(size1);
    v1.accept();

    cout << "Enter size of second vector: ";
    cin >> size2;
    Vector v2(size2);
    v2.accept();


    cout << "First vector: ";
    v1.display();
    cout << "Second vector: ";
    v2.display();

    
    Vector unionVector = Vector::calculateUnion(v1, v2);
    cout << "Union of vectors: ";
    unionVector.display();

    return 0;
}




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



/*   2.Create a C++ class Vector with data members size & pointer to integer. The size of the vector varies so the memory should be allocated
 dynamically.Perform following operations:.
1. accept vector
2.display vector in format(10,20,30,…….,)
3.calculate union of two vectors.
(use parameterized constructor & copy constructor)[25 Marks]        */

#include <iostream.h>
#include <conio.h>

class Vector {
    int size;
    int *arr;

public:
    Vector(int s) {
        size = s;
        arr = new int[size];
    }

    Vector(const Vector &v) {
        size = v.size;
        arr = new int[size];
        for (int i = 0; i < size; i++) {
            arr[i] = v.arr[i];
        }
    }

    ~Vector() {
        delete[] arr;
    }

    void accept() {
        cout << "\nEnter " << size << " elements: ";
        for (int i = 0; i < size; i++) {
            cin >> arr[i];
        }
    }

    void display() {
        cout << "(";
        for (int i = 0; i < size; i++) {
            cout << arr[i];
            if (i < size - 1) cout << ",";
        }
        cout << ")\n";
    }

    Vector unionVector(Vector v2) {
        int newSize = size + v2.size;
        int *temp = new int[newSize];

        int index = 0;
        for (int i = 0; i < size; i++) {
            temp[index++] = arr[i];
        }

        for (int i = 0; i < v2.size; i++) {
            int isDuplicate = 0;
            for (int j = 0; j < size; j++) {
                if (v2.arr[i] == arr[j]) {
                    isDuplicate = 1;
                    break;
                }
            }
            if (!isDuplicate) {
                temp[index++] = v2.arr[i];
            }
        }

        Vector unionVec(index);
        for (int i = 0; i < index; i++) {
            unionVec.arr[i] = temp[i];
        }

        delete[] temp;
        return unionVec;
    }
};

void main() {
    clrscr();

    int size1, size2;
    cout << "Enter size of first vector: ";
    cin >> size1;
    Vector v1(size1);
    v1.accept();

    cout << "Enter size of second vector: ";
    cin >> size2;
    Vector v2(size2);
    v2.accept();

    cout << "\nFirst Vector: ";
    v1.display();
    cout << "Second Vector: ";
    v2.display();

    Vector vUnion = v1.unionVector(v2);
    cout << "Union of Vectors: ";
    vUnion.display();

    getch();
}








--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

